
my_drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001100  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001230  08001230  00011230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001254  08001254  0001125c  2**0
                  CONTENTS
  4 .ARM          00000000  08001254  08001254  0001125c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001254  0800125c  0001125c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001254  08001254  00011254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001125c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000000  0800125c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800125c  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001125c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063f9  00000000  00000000  00011285  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001226  00000000  00000000  0001767e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000390  00000000  00000000  000188a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  00018c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000053c2  00000000  00000000  00018f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000039b9  00000000  00000000  0001e302  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000135b9  00000000  00000000  00021cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00035274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c14  00000000  00000000  000352f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001218 	.word	0x08001218

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001218 	.word	0x08001218

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "CortexMX_OS_porting.h"


unsigned char SysTickLED ;
void HardFault_Handler (void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1) ;
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void	MemManage_Handler (void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1) ;
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void	BusFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1) ;
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void	UsageFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1) ;
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:


__attribute ((naked)) void SVC_Handler ()
{
	//	SWITCH_CPU_AccessLevel (privileged);
	__asm ("tst lr, #4 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bba3 	b.w	800098c <OS_SVC>
			"ITE EQ \n\t" //To execute Thumb instructions conditionally, you can either use an IT instruction, or a conditional branch instruction.
			"mrseq r0,MSP \n\t "
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 8000246:	bf00      	nop

08000248 <HW_init>:



void HW_init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0



	//	decrease PenSV  interrupt priority to be  smaller than or equal  SySTICK Timer
	//SysTICK have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <trigger_OS_PendSV>:



void trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:

void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//	8 MHZ
	//	1 count -> 0.125 us
	//	X count -> 1 ms
	//	X = 8000 Count

	 SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>


}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SysTickLED ^= 1 ;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Handler+0x24>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Handler+0x24>)
 8000298:	701a      	strb	r2, [r3, #0]
	MYRTOS_Update_TasksWaitingTime();
 800029a:	f000 fc11 	bl	8000ac0 <MYRTOS_Update_TasksWaitingTime>
	//Determine Pcurrent & Pnext
	Decide_whatNext();
 800029e:	f000 fb23 	bl	80008e8 <Decide_whatNext>
	//Switch Context & restore
	trigger_OS_PendSV();
 80002a2:	f7ff ffdb 	bl	800025c <trigger_OS_PendSV>

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000070 	.word	0x20000070

080002b0 <FIFO_init>:
 *      Author: yaser
 */

#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_init+0x16>
		return FIFO_NULL;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e011      	b.n	80002ea <FIFO_init+0x3a>

	fifo->base = buff ;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002e8:	2300      	movs	r3, #0

}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_enqueue+0x1a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800030e:	2303      	movs	r3, #3
 8000310:	e02d      	b.n	800036e <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	429a      	cmp	r2, r3
 800031c:	d107      	bne.n	800032e <FIFO_enqueue+0x3a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	429a      	cmp	r2, r3
 8000328:	d101      	bne.n	800032e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800032a:	2301      	movs	r3, #1
 800032c:	e01f      	b.n	800036e <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68d2      	ldr	r2, [r2, #12]
 8000348:	4611      	mov	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6912      	ldr	r2, [r2, #16]
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	440a      	add	r2, r1
 8000352:	3a04      	subs	r2, #4
 8000354:	4293      	cmp	r3, r2
 8000356:	d104      	bne.n	8000362 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	e004      	b.n	800036c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	1d1a      	adds	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800036c:	2300      	movs	r3, #0


}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <FIFO_dequeue+0x1a>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000392:	2303      	movs	r3, #3
 8000394:	e028      	b.n	80003e8 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e020      	b.n	80003e8 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	68d2      	ldr	r2, [r2, #12]
 80003c2:	4611      	mov	r1, r2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6912      	ldr	r2, [r2, #16]
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	440a      	add	r2, r1
 80003cc:	3a04      	subs	r2, #4
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d104      	bne.n	80003dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	e004      	b.n	80003e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	1d1a      	adds	r2, r3, #4
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80003f4:	4b6f      	ldr	r3, [pc, #444]	; (80005b4 <PendSV_Handler+0x1c0>)
 80003f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fa:	f3ef 8009 	mrs	r0, PSP
 80003fe:	4602      	mov	r2, r0
 8000400:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP-- ;
 8000402:	4b6c      	ldr	r3, [pc, #432]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000404:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	3a04      	subs	r2, #4
 800040c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800040e:	4b69      	ldr	r3, [pc, #420]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000410:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4622      	mov	r2, r4
 8000418:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800041a:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <PendSV_Handler+0x1c0>)
 800041c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	3a04      	subs	r2, #4
 8000424:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000426:	4b63      	ldr	r3, [pc, #396]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000428:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	462a      	mov	r2, r5
 8000430:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000432:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000434:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	3a04      	subs	r2, #4
 800043c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800043e:	4b5d      	ldr	r3, [pc, #372]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4632      	mov	r2, r6
 8000448:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800044a:	4b5a      	ldr	r3, [pc, #360]	; (80005b4 <PendSV_Handler+0x1c0>)
 800044c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	3a04      	subs	r2, #4
 8000454:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000456:	4b57      	ldr	r3, [pc, #348]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	463a      	mov	r2, r7
 8000460:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000462:	4b54      	ldr	r3, [pc, #336]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000464:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	3a04      	subs	r2, #4
 800046c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800046e:	4b51      	ldr	r3, [pc, #324]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000470:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4642      	mov	r2, r8
 8000478:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800047a:	4b4e      	ldr	r3, [pc, #312]	; (80005b4 <PendSV_Handler+0x1c0>)
 800047c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	3a04      	subs	r2, #4
 8000484:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000486:	4b4b      	ldr	r3, [pc, #300]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000488:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	464a      	mov	r2, r9
 8000490:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000492:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	3a04      	subs	r2, #4
 800049c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800049e:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4652      	mov	r2, sl
 80004a8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 80004aa:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	3a04      	subs	r2, #4
 80004b4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	465a      	mov	r2, fp
 80004c0:	601a      	str	r2, [r3, #0]


	//====================================
	//Restore the Context of the Next Task
	//====================================
	if (OS_Control.NextTask != NULL){
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <PendSV_Handler+0xec>
	OS_Control.CurrentTask = OS_Control.NextTask ;
 80004cc:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004d2:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004d4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL ;
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004e0:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 80004ec:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	3204      	adds	r2, #4
 80004f6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000506:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	3204      	adds	r2, #4
 800050e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000512:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <PendSV_Handler+0x1c0>)
 800051e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000522:	699a      	ldr	r2, [r3, #24]
 8000524:	3204      	adds	r2, #4
 8000526:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <PendSV_Handler+0x1c0>)
 800052a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000536:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053a:	699a      	ldr	r2, [r3, #24]
 800053c:	3204      	adds	r2, #4
 800053e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000542:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <PendSV_Handler+0x1c0>)
 800054e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	3204      	adds	r2, #4
 8000556:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <PendSV_Handler+0x1c0>)
 800055a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000566:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	3204      	adds	r2, #4
 800056e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000572:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <PendSV_Handler+0x1c0>)
 800057e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	3204      	adds	r2, #4
 8000586:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <PendSV_Handler+0x1c0>)
 800058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000596:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059a:	699a      	ldr	r2, [r3, #24]
 800059c:	3204      	adds	r2, #4
 800059e:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <PendSV_Handler+0x1c0>)
 80005a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80005ae:	4770      	bx	lr

}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	20000074 	.word	0x20000074

080005b8 <MYRTOS_IdleTask>:



unsigned char IdleTaskLed ;
void MYRTOS_IdleTask()
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	//
	//		In general, when you want to wait for any type of interrupt, you can use the "wfi" instruction, but if you want to wait for a specific event, you would use the "wfe" instruction, as it allows you to wait for a specific event, rather than any interrupt.
	//
	while(1)
	{
		IdleTaskLed ^= 1 ;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <MYRTOS_IdleTask+0x18>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	f083 0301 	eor.w	r3, r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <MYRTOS_IdleTask+0x18>)
 80005c8:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 80005ca:	bf20      	wfe
		IdleTaskLed ^= 1 ;
 80005cc:	e7f6      	b.n	80005bc <MYRTOS_IdleTask+0x4>
 80005ce:	bf00      	nop
 80005d0:	20000278 	.word	0x20000278

080005d4 <MYRTOS_Create_MainStack>:




void MYRTOS_Create_MainStack()
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <MYRTOS_Create_MainStack+0x34>)
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005dc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005e2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005e6:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005ec:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between Main Task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005f2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80005f6:	3b08      	subs	r3, #8
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005fa:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if (_E_MSP_Task <&_eheap) Error:excedded the availble stack size
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20002800 	.word	0x20002800
 800060c:	20000074 	.word	0x20000074

08000610 <MYRTOS_init>:

MYRTOS_errorID MYRTOS_init()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError ;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend ;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MYRTOS_init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the MAIN Stack for OS
	MYRTOS_Create_MainStack();
 8000622:	f7ff ffd7 	bl	80005d4 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 8000626:	2264      	movs	r2, #100	; 0x64
 8000628:	4913      	ldr	r1, [pc, #76]	; (8000678 <MYRTOS_init+0x68>)
 800062a:	4814      	ldr	r0, [pc, #80]	; (800067c <MYRTOS_init+0x6c>)
 800062c:	f7ff fe40 	bl	80002b0 <FIFO_init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <MYRTOS_init+0x2c>
	{
		error += Ready_Queue_init_error ;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	3301      	adds	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE TASK
	strcpy (MYRTOS_idleTask.TaskName, "idleTask");
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MYRTOS_init+0x70>)
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MYRTOS_init+0x74>)
 8000640:	ca07      	ldmia	r2, {r0, r1, r2}
 8000642:	c303      	stmia	r3!, {r0, r1}
 8000644:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255 ;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MYRTOS_init+0x78>)
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_IdleTask ;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MYRTOS_init+0x78>)
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MYRTOS_init+0x7c>)
 8000650:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300 ;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MYRTOS_init+0x78>)
 8000654:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000658:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <MYRTOS_init+0x78>)
 800065c:	f000 f856 	bl	800070c <MYRTOS_CreateTask>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4413      	add	r3, r2
 8000668:	71fb      	strb	r3, [r7, #7]

	return error ;
 800066a:	79fb      	ldrb	r3, [r7, #7]

}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000074 	.word	0x20000074
 8000678:	2000027c 	.word	0x2000027c
 800067c:	20000220 	.word	0x20000220
 8000680:	20000250 	.word	0x20000250
 8000684:	08001230 	.word	0x08001230
 8000688:	20000234 	.word	0x20000234
 800068c:	080005b9 	.word	0x080005b9

08000690 <MyRTOS_Create_TaskStack>:


void MyRTOS_Create_TaskStack(Task_ref* Tref)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP-- ;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	1f1a      	subs	r2, r3, #4
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;         //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006b4:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	1f1a      	subs	r2, r3, #4
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	1f1a      	subs	r2, r3, #4
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f06f 0202 	mvn.w	r2, #2
 80006dc:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e00b      	b.n	80006fc <MyRTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP-- ;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	1f1a      	subs	r2, r3, #4
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP)  = 0 ;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b0c      	cmp	r3, #12
 8000700:	ddf0      	ble.n	80006e4 <MyRTOS_Create_TaskStack+0x54>

	}



}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <MYRTOS_CreateTask>:
MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NoError ;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

	//Create Its OWN PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MYRTOS_CreateTask+0x74>)
 800071a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size ;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	691a      	ldr	r2, [r3, #16]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1ad2      	subs	r2, r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	615a      	str	r2, [r3, #20]
	//	- _E_PSP_Task	-
	//	-				-
	//	- _eheap		-
	//	-				-
	//
	if(Tref->_E_PSP_Task < (unsigned int)(&(_eheap)))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <MYRTOS_CreateTask+0x78>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d201      	bcs.n	800073e <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize ;
 800073a:	2302      	movs	r3, #2
 800073c:	e01b      	b.n	8000776 <MYRTOS_CreateTask+0x6a>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	3b08      	subs	r3, #8
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <MYRTOS_CreateTask+0x74>)
 8000746:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack( Tref);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ffa0 	bl	8000690 <MyRTOS_Create_TaskStack>

	//update sch Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks]= Tref ;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MYRTOS_CreateTask+0x74>)
 8000752:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000756:	490a      	ldr	r1, [pc, #40]	; (8000780 <MYRTOS_CreateTask+0x74>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++ ;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MYRTOS_CreateTask+0x74>)
 8000760:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000764:	3301      	adds	r3, #1
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <MYRTOS_CreateTask+0x74>)
 8000768:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c


	//Task State Update -> Suspend
	Tref->TaskState = Suspend ;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 8000774:	7bfb      	ldrb	r3, [r7, #15]

}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000074 	.word	0x20000074
 8000784:	20000b20 	.word	0x20000b20

08000788 <bubbleSort>:

//Handler
void bubbleSort()
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	Task_ref* temp ;
	n = OS_Control.NoOfActiveTasks ;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <bubbleSort+0x8c>)
 8000790:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000794:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	e030      	b.n	80007fe <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	e023      	b.n	80007ea <bubbleSort+0x62>
			if (OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j + 1]->priority)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <bubbleSort+0x8c>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007aa:	791a      	ldrb	r2, [r3, #4]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4918      	ldr	r1, [pc, #96]	; (8000814 <bubbleSort+0x8c>)
 80007b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d913      	bls.n	80007e4 <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTasks[j] ;
 80007bc:	4a15      	ldr	r2, [pc, #84]	; (8000814 <bubbleSort+0x8c>)
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c4:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j + 1 ] ;
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	3301      	adds	r3, #1
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <bubbleSort+0x8c>)
 80007cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d0:	4910      	ldr	r1, [pc, #64]	; (8000814 <bubbleSort+0x8c>)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j + 1] = temp ;
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	3301      	adds	r3, #1
 80007dc:	490d      	ldr	r1, [pc, #52]	; (8000814 <bubbleSort+0x8c>)
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	3b01      	subs	r3, #1
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d3d4      	bcc.n	80007a2 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3b01      	subs	r3, #1
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	429a      	cmp	r2, r3
 8000806:	d3c9      	bcc.n	800079c <bubbleSort+0x14>
			}

}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000074 	.word	0x20000074

08000818 <MyRTOS_Update_Schadule_tables>:
//Handler
void MyRTOS_Update_Schadule_tables()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
	Task_ref* temp =NULL ;
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask ;
	Task_ref* PnextTask ;
	int i = 0 ;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 8000826:	f7ff ffaf 	bl	8000788 <bubbleSort>
	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &temp /* pointer to pointer */)!=FIFO_EMPTY);
 800082a:	bf00      	nop
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	482b      	ldr	r0, [pc, #172]	; (80008e0 <MyRTOS_Update_Schadule_tables+0xc8>)
 8000832:	f7ff fda1 	bl	8000378 <FIFO_dequeue>
 8000836:	4603      	mov	r3, r0
 8000838:	2b02      	cmp	r3, #2
 800083a:	d1f7      	bne.n	800082c <MyRTOS_Update_Schadule_tables+0x14>

	//3- update ready queue

	while(i< OS_Control.NoOfActiveTasks)
 800083c:	e044      	b.n	80008c8 <MyRTOS_Update_Schadule_tables+0xb0>
	{
		Ptask = OS_Control.OSTasks[i] ;
 800083e:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <MyRTOS_Update_Schadule_tables+0xcc>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000846:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1] ;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	4a25      	ldr	r2, [pc, #148]	; (80008e4 <MyRTOS_Update_Schadule_tables+0xcc>)
 800084e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000852:	607b      	str	r3, [r7, #4]
		if (Ptask->TaskState != Suspend)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800085a:	2b00      	cmp	r3, #0
 800085c:	d031      	beq.n	80008c2 <MyRTOS_Update_Schadule_tables+0xaa>
		{
			//in case we reached to the end of avaliable OSTASKS
			if (PnextTask->TaskState == Suspend)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000864:	2b00      	cmp	r3, #0
 8000866:	d108      	bne.n	800087a <MyRTOS_Update_Schadule_tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	481d      	ldr	r0, [pc, #116]	; (80008e0 <MyRTOS_Update_Schadule_tables+0xc8>)
 800086c:	f7ff fd42 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	2203      	movs	r2, #3
 8000874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 8000878:	e02e      	b.n	80008d8 <MyRTOS_Update_Schadule_tables+0xc0>
			}
			//	if the Ptask priority > nexttask then (lowest number is meaning higher priority)
			if (Ptask->priority < PnextTask->priority )
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	791a      	ldrb	r2, [r3, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	429a      	cmp	r2, r3
 8000884:	d208      	bcs.n	8000898 <MyRTOS_Update_Schadule_tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000886:	68b9      	ldr	r1, [r7, #8]
 8000888:	4815      	ldr	r0, [pc, #84]	; (80008e0 <MyRTOS_Update_Schadule_tables+0xc8>)
 800088a:	f7ff fd33 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2203      	movs	r2, #3
 8000892:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 8000896:	e01f      	b.n	80008d8 <MyRTOS_Update_Schadule_tables+0xc0>
			}else if (Ptask->priority == PnextTask->priority)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	791a      	ldrb	r2, [r3, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d108      	bne.n	80008b6 <MyRTOS_Update_Schadule_tables+0x9e>
			{
				//	if the Ptask priority == nexttask then
				//		push Ptask to ready state
				//	And make the ptask = nexttask  and nexttask++
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MyRTOS_Update_Schadule_tables+0xc8>)
 80008a8:	f7ff fd24 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2203      	movs	r2, #3
 80008b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80008b4:	e005      	b.n	80008c2 <MyRTOS_Update_Schadule_tables+0xaa>
			}else if (Ptask->priority > PnextTask->priority)
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	791a      	ldrb	r2, [r3, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d809      	bhi.n	80008d6 <MyRTOS_Update_Schadule_tables+0xbe>
				break ;
			}
		}


		i++ ;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.NoOfActiveTasks)
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MyRTOS_Update_Schadule_tables+0xcc>)
 80008ca:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d8b4      	bhi.n	800083e <MyRTOS_Update_Schadule_tables+0x26>
	}

}
 80008d4:	e000      	b.n	80008d8 <MyRTOS_Update_Schadule_tables+0xc0>
				break ;
 80008d6:	bf00      	nop
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000220 	.word	0x20000220
 80008e4:	20000074 	.word	0x20000074

080008e8 <Decide_whatNext>:
//Otherwise, the next task is dequeued from the ready queue using the FIFO_dequeue function and set to the running state.
//		If the current task has the same priority as the next task and is not suspended, it is added back to the ready queue and its state is set to ready.
//		The selected next task is stored in OS_Control.NextTask.
//Handler Mode
void Decide_whatNext()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	//if Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_QUEUE.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend) //FIFO_EMPTY
 80008ec:	4b24      	ldr	r3, [pc, #144]	; (8000980 <Decide_whatNext+0x98>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d11a      	bne.n	800092a <Decide_whatNext+0x42>
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <Decide_whatNext+0x9c>)
 80008f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d013      	beq.n	800092a <Decide_whatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running ;
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <Decide_whatNext+0x9c>)
 8000904:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000908:	2201      	movs	r2, #1
 800090a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again(round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <Decide_whatNext+0x9c>)
 8000910:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000914:	4619      	mov	r1, r3
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <Decide_whatNext+0x98>)
 8000918:	f7ff fcec 	bl	80002f4 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask ;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <Decide_whatNext+0x9c>)
 800091e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <Decide_whatNext+0x9c>)
 8000924:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready ;
		}
	}
}
 8000928:	e027      	b.n	800097a <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 800092a:	4917      	ldr	r1, [pc, #92]	; (8000988 <Decide_whatNext+0xa0>)
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <Decide_whatNext+0x98>)
 800092e:	f7ff fd23 	bl	8000378 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running ;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <Decide_whatNext+0x9c>)
 8000934:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000938:	2201      	movs	r2, #1
 800093a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority )&&(OS_Control.CurrentTask->TaskState != Suspend))
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <Decide_whatNext+0x9c>)
 8000940:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000944:	791a      	ldrb	r2, [r3, #4]
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <Decide_whatNext+0x9c>)
 8000948:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	429a      	cmp	r2, r3
 8000950:	d113      	bne.n	800097a <Decide_whatNext+0x92>
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <Decide_whatNext+0x9c>)
 8000954:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000958:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00c      	beq.n	800097a <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <Decide_whatNext+0x9c>)
 8000962:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <Decide_whatNext+0x98>)
 800096a:	f7ff fcc3 	bl	80002f4 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready ;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <Decide_whatNext+0x9c>)
 8000970:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000974:	2203      	movs	r2, #3
 8000976:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000220 	.word	0x20000220
 8000984:	20000074 	.word	0x20000074
 8000988:	20000218 	.word	0x20000218

0800098c <OS_SVC>:

//Handler Mode
void OS_SVC(int* Stack_Frame)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,return address (PC) and XPSR
	unsigned char SVC_number ;
	SVC_number = *((unsigned char*)(((unsigned char*)Stack_Frame[6])-2)) ;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3318      	adds	r3, #24
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3b02      	subs	r3, #2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	73fb      	strb	r3, [r7, #15]

	switch (SVC_number)
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	db1f      	blt.n	80009e6 <OS_SVC+0x5a>
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	dd02      	ble.n	80009b0 <OS_SVC+0x24>
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d017      	beq.n	80009de <OS_SVC+0x52>

		break;
	}


}
 80009ae:	e01a      	b.n	80009e6 <OS_SVC+0x5a>
		MyRTOS_Update_Schadule_tables();
 80009b0:	f7ff ff32 	bl	8000818 <MyRTOS_Update_Schadule_tables>
		if (OS_Control.OSmodeID == OsRunning)
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <OS_SVC+0x64>)
 80009b6:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d112      	bne.n	80009e4 <OS_SVC+0x58>
			if (strcmp(OS_Control.CurrentTask->TaskName,"idleTask") != 0)
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <OS_SVC+0x64>)
 80009c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009c4:	331c      	adds	r3, #28
 80009c6:	490b      	ldr	r1, [pc, #44]	; (80009f4 <OS_SVC+0x68>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fbd1 	bl	8000170 <strcmp>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d007      	beq.n	80009e4 <OS_SVC+0x58>
				Decide_whatNext();
 80009d4:	f7ff ff88 	bl	80008e8 <Decide_whatNext>
				trigger_OS_PendSV();
 80009d8:	f7ff fc40 	bl	800025c <trigger_OS_PendSV>
		break;
 80009dc:	e002      	b.n	80009e4 <OS_SVC+0x58>
		MyRTOS_Update_Schadule_tables();
 80009de:	f7ff ff1b 	bl	8000818 <MyRTOS_Update_Schadule_tables>
		break;
 80009e2:	e000      	b.n	80009e6 <OS_SVC+0x5a>
		break;
 80009e4:	bf00      	nop
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000074 	.word	0x20000074
 80009f4:	08001230 	.word	0x08001230

080009f8 <MYRTOS_OS_SVC_Set>:

//Thread Mode
MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	switch (ID)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d817      	bhi.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
 8000a08:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <MYRTOS_OS_SVC_Set+0x18>)
 8000a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0e:	bf00      	nop
 8000a10:	08000a25 	.word	0x08000a25
 8000a14:	08000a29 	.word	0x08000a29
 8000a18:	08000a2d 	.word	0x08000a2d
 8000a1c:	08000a31 	.word	0x08000a31
 8000a20:	08000a35 	.word	0x08000a35
	{
	case SVC_Activatetask:
		__asm("svc #0x00");
 8000a24:	df00      	svc	0
		break;
 8000a26:	e007      	b.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_terminateTask:
		__asm("svc #0x01");
 8000a28:	df01      	svc	1
		break;
 8000a2a:	e005      	b.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
 8000a2c:	df02      	svc	2
		break;
 8000a2e:	e003      	b.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_AquireMutex:
		__asm("svc #0x03");  //Assignment Task
 8000a30:	df03      	svc	3
		break;
 8000a32:	e001      	b.n	8000a38 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_ReleaseMutex:
		__asm("svc #0x04"); //Assignment Task
 8000a34:	df04      	svc	4
		break;
 8000a36:	bf00      	nop
	}
}
 8000a38:	bf00      	nop
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <MYRTOS_ActivateTask>:

void MYRTOS_ActivateTask (Task_ref* Tref)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting ;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2202      	movs	r2, #2
 8000a50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_Activatetask);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ffcf 	bl	80009f8 <MYRTOS_OS_SVC_Set>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <MYRTOS_STARTOS>:
}



void MYRTOS_STARTOS()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OsRunning ;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MYRTOS_STARTOS+0x54>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task =Idle Task"
	OS_Control.CurrentTask = &MYRTOS_idleTask ;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MYRTOS_STARTOS+0x54>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MYRTOS_STARTOS+0x58>)
 8000a74:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate IDLE Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000a78:	4810      	ldr	r0, [pc, #64]	; (8000abc <MYRTOS_STARTOS+0x58>)
 8000a7a:	f7ff ffe3 	bl	8000a44 <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); // 1ms
 8000a7e:	f7ff fbfb 	bl	8000278 <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <MYRTOS_STARTOS+0x54>)
 8000a84:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f380 8809 	msr	PSP, r0
	//Switch Thread Mode SP from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 8000a90:	f3ef 8014 	mrs	r0, CONTROL
 8000a94:	f04f 0102 	mov.w	r1, #2
 8000a98:	ea40 0001 	orr.w	r0, r0, r1
 8000a9c:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_to_unprivileged;
 8000aa0:	f3ef 8314 	mrs	r3, CONTROL
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <MYRTOS_STARTOS+0x58>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	4798      	blx	r3
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000074 	.word	0x20000074
 8000abc:	20000234 	.word	0x20000234

08000ac0 <MYRTOS_Update_TasksWaitingTime>:
//				(OS_Control.OSTasks[i]->TimingWaiting) is enabled, decrements the wait ticks count.
//				If the count reaches 1, the task's blocking is disabled and its state is set to Waiting.
//				The function also invokes the MYRTOS_OS_SVC_Set function with the argument SVC_TaskWaitingTime.

void MYRTOS_Update_TasksWaitingTime()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	for (int i =0; i < OS_Control.NoOfActiveTasks ; i++  )
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	e031      	b.n	8000b30 <MYRTOS_Update_TasksWaitingTime+0x70>
	{
		if (OS_Control.OSTasks[i]->TaskState == Suspend) //it is blocking until meet the time line
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d126      	bne.n	8000b2a <MYRTOS_Update_TasksWaitingTime+0x6a>
		{
			if (OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable)
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d11e      	bne.n	8000b2a <MYRTOS_Update_TasksWaitingTime+0x6a>
			{
				OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count-- ;
 8000aec:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af6:	3a01      	subs	r2, #1
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40
				if (OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count == 1)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d110      	bne.n	8000b2a <MYRTOS_Update_TasksWaitingTime+0x6a>
				{
					OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable ;
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTasks[i]->TaskState = Waiting ;
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	2202      	movs	r2, #2
 8000b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff ff67 	bl	80009f8 <MYRTOS_OS_SVC_Set>
	for (int i =0; i < OS_Control.NoOfActiveTasks ; i++  )
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8000b32:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8c7      	bhi.n	8000acc <MYRTOS_Update_TasksWaitingTime+0xc>
				}
			}
		}
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000074 	.word	0x20000074

08000b48 <task1>:
Task_ref Task1 , Task2, Task3;
MYRTOS_errorID error;

unsigned char Task1LED, Task2LED,Task3LED;
void task1()
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1LED ^=1;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <task1+0x14>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f083 0301 	eor.w	r3, r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b01      	ldr	r3, [pc, #4]	; (8000b5c <task1+0x14>)
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e7f7      	b.n	8000b4c <task1+0x4>
 8000b5c:	20000498 	.word	0x20000498

08000b60 <task2>:
	}
}
void task2()
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2LED ^=1;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <task2+0x14>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f083 0301 	eor.w	r3, r3, #1
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b01      	ldr	r3, [pc, #4]	; (8000b74 <task2+0x14>)
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e7f7      	b.n	8000b64 <task2+0x4>
 8000b74:	20000450 	.word	0x20000450

08000b78 <task3>:

	}
}
void task3()
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
	while(1)
	{
		Task3LED ^=1;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <task3+0x14>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f083 0301 	eor.w	r3, r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b01      	ldr	r3, [pc, #4]	; (8000b8c <task3+0x14>)
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e7f7      	b.n	8000b7c <task3+0x4>
 8000b8c:	200004e0 	.word	0x200004e0

08000b90 <main>:
	}
}
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	HW_init();
 8000b94:	f7ff fb58 	bl	8000248 <HW_init>
	if(MYRTOS_init() != NoError)
 8000b98:	f7ff fd3a 	bl	8000610 <MYRTOS_init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d000      	beq.n	8000ba4 <main+0x14>
		while(1);
 8000ba2:	e7fe      	b.n	8000ba2 <main+0x12>


	Task1.Stack_Size =1024 ;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <main+0xb8>)
 8000ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000baa:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1 ;
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <main+0xb8>)
 8000bae:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <main+0xbc>)
 8000bb0:	609a      	str	r2, [r3, #8]
	Task1.priority = 3;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <main+0xb8>)
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName , "Task_1");
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <main+0xc0>)
 8000bba:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <main+0xc4>)
 8000bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc0:	6018      	str	r0, [r3, #0]
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	8019      	strh	r1, [r3, #0]
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	0c0a      	lsrs	r2, r1, #16
 8000bca:	701a      	strb	r2, [r3, #0]


	Task2.Stack_Size =1024 ;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <main+0xc8>)
 8000bce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd2:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2 ;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <main+0xc8>)
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <main+0xcc>)
 8000bd8:	609a      	str	r2, [r3, #8]
	Task2.priority = 3;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <main+0xc8>)
 8000bdc:	2203      	movs	r2, #3
 8000bde:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName , "Task_2");
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <main+0xd0>)
 8000be2:	4a20      	ldr	r2, [pc, #128]	; (8000c64 <main+0xd4>)
 8000be4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be8:	6018      	str	r0, [r3, #0]
 8000bea:	3304      	adds	r3, #4
 8000bec:	8019      	strh	r1, [r3, #0]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	0c0a      	lsrs	r2, r1, #16
 8000bf2:	701a      	strb	r2, [r3, #0]



	Task3.Stack_Size =1024 ;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <main+0xd8>)
 8000bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfa:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3 ;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <main+0xd8>)
 8000bfe:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <main+0xdc>)
 8000c00:	609a      	str	r2, [r3, #8]
	Task3.priority = 3;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <main+0xd8>)
 8000c04:	2203      	movs	r2, #3
 8000c06:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName , "Task_3");
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <main+0xe0>)
 8000c0a:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <main+0xe4>)
 8000c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c10:	6018      	str	r0, [r3, #0]
 8000c12:	3304      	adds	r3, #4
 8000c14:	8019      	strh	r1, [r3, #0]
 8000c16:	3302      	adds	r3, #2
 8000c18:	0c0a      	lsrs	r2, r1, #16
 8000c1a:	701a      	strb	r2, [r3, #0]

	MYRTOS_CreateTask(&Task1);
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <main+0xb8>)
 8000c1e:	f7ff fd75 	bl	800070c <MYRTOS_CreateTask>
	MYRTOS_CreateTask(&Task2);
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <main+0xc8>)
 8000c24:	f7ff fd72 	bl	800070c <MYRTOS_CreateTask>
	MYRTOS_CreateTask(&Task3);
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <main+0xd8>)
 8000c2a:	f7ff fd6f 	bl	800070c <MYRTOS_CreateTask>

    MYRTOS_ActivateTask(&Task1);
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <main+0xb8>)
 8000c30:	f7ff ff08 	bl	8000a44 <MYRTOS_ActivateTask>
    MYRTOS_ActivateTask(&Task2);
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <main+0xc8>)
 8000c36:	f7ff ff05 	bl	8000a44 <MYRTOS_ActivateTask>
    MYRTOS_ActivateTask(&Task3);
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <main+0xd8>)
 8000c3c:	f7ff ff02 	bl	8000a44 <MYRTOS_ActivateTask>

    MYRTOS_STARTOS();
 8000c40:	f7ff ff10 	bl	8000a64 <MYRTOS_STARTOS>

	while (1)
 8000c44:	e7fe      	b.n	8000c44 <main+0xb4>
 8000c46:	bf00      	nop
 8000c48:	2000040c 	.word	0x2000040c
 8000c4c:	08000b49 	.word	0x08000b49
 8000c50:	20000428 	.word	0x20000428
 8000c54:	0800123c 	.word	0x0800123c
 8000c58:	2000049c 	.word	0x2000049c
 8000c5c:	08000b61 	.word	0x08000b61
 8000c60:	200004b8 	.word	0x200004b8
 8000c64:	08001244 	.word	0x08001244
 8000c68:	20000454 	.word	0x20000454
 8000c6c:	08000b79 	.word	0x08000b79
 8000c70:	20000470 	.word	0x20000470
 8000c74:	0800124c 	.word	0x0800124c

08000c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ca6:	f000 fa93 	bl	80011d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000caa:	f7ff ff71 	bl	8000b90 <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   r0, =_estack
 8000cb0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cbc:	0800125c 	.word	0x0800125c
  ldr r2, =_sbss
 8000cc0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cc4:	20000520 	.word	0x20000520

08000cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_2_IRQHandler>
	...

08000ccc <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <EXTI0_IRQHandler+0x1c>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <EXTI0_IRQHandler+0x1c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <EXTI0_IRQHandler+0x20>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4798      	blx	r3
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010400 	.word	0x40010400
 8000cec:	200004e4 	.word	0x200004e4

08000cf0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <EXTI1_IRQHandler+0x1c>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <EXTI1_IRQHandler+0x1c>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <EXTI1_IRQHandler+0x20>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4798      	blx	r3
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010400 	.word	0x40010400
 8000d10:	200004e4 	.word	0x200004e4

08000d14 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <EXTI2_IRQHandler+0x1c>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <EXTI2_IRQHandler+0x1c>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <EXTI2_IRQHandler+0x20>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	4798      	blx	r3
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40010400 	.word	0x40010400
 8000d34:	200004e4 	.word	0x200004e4

08000d38 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <EXTI3_IRQHandler+0x1c>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <EXTI3_IRQHandler+0x1c>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <EXTI3_IRQHandler+0x20>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	4798      	blx	r3
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010400 	.word	0x40010400
 8000d58:	200004e4 	.word	0x200004e4

08000d5c <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <EXTI4_IRQHandler+0x1c>)
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <EXTI4_IRQHandler+0x1c>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <EXTI4_IRQHandler+0x20>)
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	4798      	blx	r3
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40010400 	.word	0x40010400
 8000d7c:	200004e4 	.word	0x200004e4

08000d80 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f003 0320 	and.w	r3, r3, #32
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <EXTI9_5_IRQHandler+0x22>
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000d96:	f043 0320 	orr.w	r3, r3, #32
 8000d9a:	6153      	str	r3, [r2, #20]
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <EXTI9_5_IRQHandler+0xa4>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d008      	beq.n	8000dc0 <EXTI9_5_IRQHandler+0x40>
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <EXTI9_5_IRQHandler+0xa4>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <EXTI9_5_IRQHandler+0x5e>
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd6:	6153      	str	r3, [r2, #20]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <EXTI9_5_IRQHandler+0xa4>)
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <EXTI9_5_IRQHandler+0x7c>
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <EXTI9_5_IRQHandler+0xa4>)
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <EXTI9_5_IRQHandler+0x9a>
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <EXTI9_5_IRQHandler+0xa0>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6153      	str	r3, [r2, #20]
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <EXTI9_5_IRQHandler+0xa4>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	4798      	blx	r3

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010400 	.word	0x40010400
 8000e24:	200004e4 	.word	0x200004e4

08000e28 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d008      	beq.n	8000e4a <EXTI15_10_IRQHandler+0x22>
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e42:	6153      	str	r3, [r2, #20]
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <EXTI15_10_IRQHandler+0xc0>)
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d008      	beq.n	8000e68 <EXTI15_10_IRQHandler+0x40>
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <EXTI15_10_IRQHandler+0xc0>)
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d008      	beq.n	8000e86 <EXTI15_10_IRQHandler+0x5e>
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7e:	6153      	str	r3, [r2, #20]
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <EXTI15_10_IRQHandler+0xc0>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d008      	beq.n	8000ea4 <EXTI15_10_IRQHandler+0x7c>
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000e98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <EXTI15_10_IRQHandler+0xc0>)
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d008      	beq.n	8000ec2 <EXTI15_10_IRQHandler+0x9a>
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eba:	6153      	str	r3, [r2, #20]
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <EXTI15_10_IRQHandler+0xc0>)
 8000ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec0:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d008      	beq.n	8000ee0 <EXTI15_10_IRQHandler+0xb8>
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <EXTI15_10_IRQHandler+0xbc>)
 8000ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <EXTI15_10_IRQHandler+0xc0>)
 8000edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ede:	4798      	blx	r3

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010400 	.word	0x40010400
 8000ee8:	200004e4 	.word	0x200004e4

08000eec <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <I2C1_EV_IRQHandler+0xe8>)
 8000f04:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0e:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f18:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00a      	beq.n	8000f40 <I2C1_EV_IRQHandler+0x48>
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f000 f852 	bl	8000fe4 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d012      	beq.n	8000f76 <I2C1_EV_IRQHandler+0x7e>
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00f      	beq.n	8000f76 <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d109      	bne.n	8000f76 <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000f6e:	2102      	movs	r1, #2
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f000 f837 	bl	8000fe4 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7e:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00f      	beq.n	8000fa6 <I2C1_EV_IRQHandler+0xae>
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00c      	beq.n	8000fa6 <I2C1_EV_IRQHandler+0xae>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d009      	beq.n	8000fa6 <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	6978      	ldr	r0, [r7, #20]
 8000fa2:	f000 f81f 	bl	8000fe4 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fae:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00f      	beq.n	8000fd6 <I2C1_EV_IRQHandler+0xde>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00c      	beq.n	8000fd6 <I2C1_EV_IRQHandler+0xde>
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d103      	bne.n	8000fd6 <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000fce:	2104      	movs	r1, #4
 8000fd0:	6978      	ldr	r0, [r7, #20]
 8000fd2:	f000 f807 	bl	8000fe4 <Slave_States>
			}
		}



}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40005400 	.word	0x40005400

08000fe4 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a32      	ldr	r2, [pc, #200]	; (80010bc <Slave_States+0xd8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d856      	bhi.n	80010b4 <Slave_States+0xd0>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <Slave_States+0x28>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001027 	.word	0x08001027
 8001010:	08001021 	.word	0x08001021
 8001014:	0800104b 	.word	0x0800104b
 8001018:	08001063 	.word	0x08001063
 800101c:	08001087 	.word	0x08001087
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8001024:	e046      	b.n	80010b4 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	d03b      	beq.n	80010aa <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	4922      	ldr	r1, [pc, #136]	; (80010c0 <Slave_States+0xdc>)
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3320      	adds	r3, #32
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2000      	movs	r0, #0
 8001046:	4798      	blx	r3
		}

		break ;
 8001048:	e02f      	b.n	80010aa <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	491c      	ldr	r1, [pc, #112]	; (80010c0 <Slave_States+0xdc>)
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3320      	adds	r3, #32
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2002      	movs	r0, #2
 800105e:	4798      	blx	r3

		break ;
 8001060:	e028      	b.n	80010b4 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	2b00      	cmp	r3, #0
 800106c:	d01f      	beq.n	80010ae <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	4913      	ldr	r1, [pc, #76]	; (80010c0 <Slave_States+0xdc>)
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	3320      	adds	r3, #32
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2003      	movs	r0, #3
 8001082:	4798      	blx	r3
		}

		break ;
 8001084:	e013      	b.n	80010ae <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10f      	bne.n	80010b2 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	490a      	ldr	r1, [pc, #40]	; (80010c0 <Slave_States+0xdc>)
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	3320      	adds	r3, #32
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2004      	movs	r0, #4
 80010a6:	4798      	blx	r3
		}

		break ;
 80010a8:	e003      	b.n	80010b2 <Slave_States+0xce>
		break ;
 80010aa:	bf00      	nop
 80010ac:	e002      	b.n	80010b4 <Slave_States+0xd0>
		break ;
 80010ae:	bf00      	nop
 80010b0:	e000      	b.n	80010b4 <Slave_States+0xd0>
		break ;
 80010b2:	bf00      	nop
	}
	}

}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40005400 	.word	0x40005400
 80010c0:	2000001c 	.word	0x2000001c

080010c4 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <SPI1_IRQHandler>:
 * 							Generic Functions
 * =======================================================================================
 */
//ISR
void SPI1_IRQHandler (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI1->SPI_SR &  (1<<1)) >> 1 );
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <SPI1_IRQHandler+0x54>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	793b      	ldrb	r3, [r7, #4]
 80010f0:	f362 0300 	bfi	r3, r2, #0, #1
 80010f4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR &  (1<<0)) >> 0 );
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SPI1_IRQHandler+0x54>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	793b      	ldrb	r3, [r7, #4]
 8001102:	f362 0341 	bfi	r3, r2, #1, #1
 8001106:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR &  (1<<4)) >> 4 );
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <SPI1_IRQHandler+0x54>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	f362 0382 	bfi	r3, r2, #2, #1
 800111a:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src) ;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SPI1_IRQHandler+0x58>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	7938      	ldrb	r0, [r7, #4]
 8001124:	4798      	blx	r3

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40013000 	.word	0x40013000
 8001134:	20000064 	.word	0x20000064

08001138 <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI2->SPI_SR &  (1<<1)) >> 1 );
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <SPI2_IRQHandler+0x54>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	085b      	lsrs	r3, r3, #1
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	f362 0300 	bfi	r3, r2, #0, #1
 8001150:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SPI_SR &  (1<<0)) >> 0 );
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <SPI2_IRQHandler+0x54>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	793b      	ldrb	r3, [r7, #4]
 800115e:	f362 0341 	bfi	r3, r2, #1, #1
 8001162:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SPI_SR &  (1<<4)) >> 4 );
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <SPI2_IRQHandler+0x54>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	793b      	ldrb	r3, [r7, #4]
 8001172:	f362 0382 	bfi	r3, r2, #2, #1
 8001176:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src) ;
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SPI2_IRQHandler+0x58>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	7938      	ldrb	r0, [r7, #4]
 8001180:	4798      	blx	r3
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40003800 	.word	0x40003800
 8001190:	20000064 	.word	0x20000064

08001194 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <USART1_IRQHandler+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4798      	blx	r3

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000006c 	.word	0x2000006c

080011a8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <USART2_IRQHandler+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	4798      	blx	r3

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000006c 	.word	0x2000006c

080011bc <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <USART3_IRQHandler+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	4798      	blx	r3


}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000006c 	.word	0x2000006c

080011d0 <__libc_init_array>:
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	2500      	movs	r5, #0
 80011d4:	4e0c      	ldr	r6, [pc, #48]	; (8001208 <__libc_init_array+0x38>)
 80011d6:	4c0d      	ldr	r4, [pc, #52]	; (800120c <__libc_init_array+0x3c>)
 80011d8:	1ba4      	subs	r4, r4, r6
 80011da:	10a4      	asrs	r4, r4, #2
 80011dc:	42a5      	cmp	r5, r4
 80011de:	d109      	bne.n	80011f4 <__libc_init_array+0x24>
 80011e0:	f000 f81a 	bl	8001218 <_init>
 80011e4:	2500      	movs	r5, #0
 80011e6:	4e0a      	ldr	r6, [pc, #40]	; (8001210 <__libc_init_array+0x40>)
 80011e8:	4c0a      	ldr	r4, [pc, #40]	; (8001214 <__libc_init_array+0x44>)
 80011ea:	1ba4      	subs	r4, r4, r6
 80011ec:	10a4      	asrs	r4, r4, #2
 80011ee:	42a5      	cmp	r5, r4
 80011f0:	d105      	bne.n	80011fe <__libc_init_array+0x2e>
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
 80011f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011f8:	4798      	blx	r3
 80011fa:	3501      	adds	r5, #1
 80011fc:	e7ee      	b.n	80011dc <__libc_init_array+0xc>
 80011fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001202:	4798      	blx	r3
 8001204:	3501      	adds	r5, #1
 8001206:	e7f2      	b.n	80011ee <__libc_init_array+0x1e>
 8001208:	08001254 	.word	0x08001254
 800120c:	08001254 	.word	0x08001254
 8001210:	08001254 	.word	0x08001254
 8001214:	08001258 	.word	0x08001258

08001218 <_init>:
 8001218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121a:	bf00      	nop
 800121c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800121e:	bc08      	pop	{r3}
 8001220:	469e      	mov	lr, r3
 8001222:	4770      	bx	lr

08001224 <_fini>:
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001226:	bf00      	nop
 8001228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122a:	bc08      	pop	{r3}
 800122c:	469e      	mov	lr, r3
 800122e:	4770      	bx	lr
